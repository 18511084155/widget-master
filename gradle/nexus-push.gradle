apply plugin: 'com.github.dcendents.android-maven'
group = GROUP
version = VERSION_NAME
android.libraryVariants.all { variant ->
    println variant.javaCompile.classpath.files
    if(variant.name == 'release') { //我们只需 release 的 javadoc
        task("generate${variant.name.capitalize()}Javadoc", type: Javadoc) {
            // title = ''
            // description = ''
            source = variant.javaCompile.source
            classpath = files(variant.javaCompile.classpath.files, project.android.getBootClasspath())
            options {
                encoding "utf-8"
                links "http://docs.oracle.com/javase/7/docs/api/"
                linksOffline "http://d.android.com/reference", "${android.sdkDirectory}/docs/reference"
            }
            exclude '**/BuildConfig.java'
            exclude '**/R.java'
        }
        task("javadoc${variant.name.capitalize()}Jar", type: Jar, dependsOn: "generate${variant.name.capitalize()}Javadoc") {
            classifier = 'javadoc'
            from tasks.getByName("generate${variant.name.capitalize()}Javadoc").destinationDir
        }
        artifacts {
            archives tasks.getByName("javadoc${variant.name.capitalize()}Jar")
        }
    }
}

task javadoc(type: Javadoc) {
    //添加UTF-8编码否则注释可能JAVADOC文档可能生成不了
    options{
        encoding "UTF-8"
        charSet 'UTF-8'
        author true
        version true
        links "http://docs.oracle.com/javase/7/docs/api"
        title "swipeJavaDoc"
    }
    source = android.sourceSets.main.java.srcDirs
    options.linkSource true
    classpath += project.files(project.android.getBootClasspath().join(File.pathSeparator))
    failOnError false
}
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}


artifacts {
    archives javadocJar
    archives sourcesJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            def userName = properties.getProperty("nexus.userName")
            def password = properties.getProperty("nexus.password")
            def mavenUrl = properties.getProperty("nexus.mavenUrl")
            //http://127.0.0.1:9999/nexus-zip/repository/maven-releases/"   仓库路径的url
            repository(url: mavenUrl) {
                authentication(userName: userName, password: password)      //账号，密码
            }
            pom.project {
                //version：版本号
                version VERSION_NAME
                //artifactId：类似于项目名称
                artifactId POM_ARTIFACT_ID
                //groupId:唯一标识符
                groupId GROUP
                packaging POM_PACKAGING
                description POM_NAME
            }

        }
    }
}